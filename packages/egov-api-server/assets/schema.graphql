"""
Information about a geographical location based on a postal code.
The same postal code can belong to different places and one place can have many postal codes.
"""
type PostalCode {
  "Postal code."
  postalCode: String!

  "Place name in one of its local languages."
  placeName: String!

  "Estimated longitude in degrees (wgs84)."
  longitude: Float!

  "Estimated latitude in degrees (wgs84)."
  latitude: Float!

  "Two-letter country identifier (ISO 3166-1 alpha-2)."
  countryCode: String!

  "Order subdivision (state)."
  adminName1: String

  "Order subdivision (state) code."
  adminCode1: String

  "Order subdivision (country/province)."
  adminName2: String

  "Order subdivision (country/province) code."
  adminCode2: String

  "Order subdivision (community)."
  adminName3: String

  "Order subdivision (community) code."
  adminCode3: String

  "Information about the radioelectric services and infrastructure present in a place."
  radioInformation: RadioInformation @cacheControl(maxAge: 60)
}

"""
An antenna is a physical device to transmit or receive electromagnetic (e.g. TV or radio) waves.
"""
type Antenna {
  "A unique antenna identifier."
  id: ID!

  "Human readable identifier for this antenna"
  code: String!

  "Human readable description of the antenna"
  label: String!

  "The antenna's address in human readable format."
  address: String

  "Web address to get detailed information about the antenna."
  url: String

  "Longitude in degrees (wgs84) where the antenna is located."
  longitude: Float!

  "Latitude in degrees (wgs84) where the antenna is located."
  latitude: Float!
}

"""
Different types of telecommunication networks.
"""
enum NetworkType {
  "Mobile 4G in the 800MHz band."
  CELLULAR_4G_800MHZ
}

"""
Television signal.
"""
type TelevisionSignal {
  "A 'multiple' is a group of TV channels broadcasted using the same frequency band."
  multiple: String!

  "Physical center that broadcasts the TV signal"
  center: String!

  "Channel frequencies. Frequencies used by a group of channels ('multiple') change in different geographical locations"
  channel: Int!
}

"""
Aggregated radioelectric services and infrastructure.
"""
type RadioInformation {
  "Telecomunnication antennas"
  antennas(limit: Int = 10): [Antenna]

  "Telecomunnication networks detected. May have false negatives."
  networks: [NetworkType]

  "Television signals"
  televisionSignals: [TelevisionSignal]
}

"""
Different types of traffic radars.
"""
enum TrafficRadarType {
  "Fixed traffic radar. Its position doesn't change."
  FIXED

  "Moving traffic radar. Its position changes."
  MOVING

  "Stretch traffic radar."
  STRETCH

  "Other unknown types of traffic radars"
  UNKNOWN
}

"""
Traffic radar sense in the road.
"""
enum TrafficRadarSense {
  "Increasing sense of the road."
  INCREASING

  "Decreasing sense of the road."
  DECREASING

  "Both senses (increasing and decreasing)."
  BOTH

  "Unknown sense for unexpected values egov does not understand."
  UNKNOWN
}

"""
Traffic radar. Beta.
"""
type TrafficRadar {
  """
  Order subdivision (province).
  Some radars in Cataluña don't have this info and appear as "UNKNOWN (Cataluña)" for now.
  """
  adminName2: String!

  "Name of the road. For example N-IV or CM-3106."
  roadName: String!

  "Type of traffic radar."
  type: TrafficRadarType!

  "Sense of the traffic radar in the road."
  sense: TrafficRadarSense!

  """
  The point in the road in kilometers.
  A radar can have up to two locations, one per sense in the road.
  These locations must be translated into geographical coordinates in the future.
  Also, its semantic for STRETCH radars must be reviewed.
  """
  kilometers: [Float]!

  "Maximum allowed speed at that point in the road."
  maxSpeed: Float
}

"""
Defines a point of interest.
"""
union PointOfInterest = TrafficRadar

"GraphQL API entry point."
type Query {
  """
  Get information about points of interest.
  This is still an alpha feature.
  """
  poi: [PointOfInterest]! @cacheControl(maxAge: 600)

  """
  Get information about geographical places that have a specific postal code.
  """
  postalCode(postalCode: String!): [PostalCode]!
}